<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boxer_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CREATION CODE VARS HOLDER

type="idle";

image_fps=0.5;

knockback=false;

//speed=1;

first_run=true;

alert_range=500;

alerted_from_idle=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TIMERS

timer=0;
timer_max=26;
timer_inside=0;
timer_inside_max=10;

vis_timer=0;
vis_timer_max=get_visibilitytimer();

crit_timer_max=10;
crit_timer=0;

spd_reg=random_range(1.0,3.0);
spd_ins=random_range(0.05,0.1);
spd=spd_reg;
//image_speed=0.5;

//knockback=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///image specific


image_angle=point_direction(x,y,player.x,player.y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MISC

last_action=type;

dir=point_direction(player.x,player.y,x,y);

death_reason="normal";
nade_x=0;
nade_y=0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ANIMATION SAVE

idle_anim=spr_boxer_idle;

walk_anim=spr_boxer_walk;

attack_anim=spr_boxer_idle;

trans_anim=spr_boxer_trans;

crit_anim=spr_boxer_damaged;

knockback_anim=spr_boxer_damaged;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATES

/*

patroling
walking
pathfinding
idle
attacking
attacking_ranged
    trans  &lt;- transforming
trans_from_path
trans_from_idle

    hp_specific
dead
crit
knockback

idle_alert
*/


state="idle_alert";

last_state=state;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HEALTH

hp_max=300;

hp=hp_max;

hp_over_decay=0.5;

hp_over_max=1000;

hp_uber=false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pathfinding

path_state="none";


def_path= path_add();

/*
globalvar grid;
grid = 64; //make global

globalvar gridlocal;
gridlocal = mp_grid_create(0, 0, room_width/grid, room_height/grid, grid, grid);
*/
//mp_potential_settings(45,180,10,false);

//grid approach

//auto -&gt; za kvadradastzo mapo

var cell_scale=128;  //koliko jih je v vsakemk rowu
var xfac =room_width/cell_scale;  //koliksen je size
var yfac =room_height/cell_scale;

grid_def = mp_grid_create(0, 0, cell_scale, cell_scale, xfac, yfac);  //no forget to destroy grid

//add cells

mp_grid_add_instances(grid_def,wall,false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wallspawn

if(place_meeting(x, y, wall)){
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Nade_knockback vars



//Timers
kno_speed=0;
kno_speed_dec=1;
//Direction
nade_dir=0;
kno_dir=0;

kno_int = get_nadedmg()/100;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FIRST RUN

if(first_run){
image_speed=image_fps;



first_run=false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TYPE PROCESSING
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WALKING

if(state="walking"){
//walking animation load
sprite_index=walk_anim;
direction=point_direction(x,y,player.x,player.y)+random_range(-10,+10);
// WALKING
timer++;
spd=spd_reg;
if(timer&gt;timer_max){
spd=spd_ins;
timer_inside++;
if(timer_inside&gt;timer_inside_max){
timer=0;timer_inside=0;
}}
//change speed tho
speed=spd;

/* rotate to player */
var player_point = point_direction(x,y,player.x,player.y);
var diff = angle_difference(image_angle,player_point);
if(image_angle!=sign(player_point)){
if((diff&lt;10)&amp;&amp;(diff&gt;-10)){
image_angle=player_point;
}
else{
    if((diff)&gt;0){
    image_angle-=get_generic_turnspeed();
    }
    else{
    image_angle+=get_generic_turnspeed();
    }}
}

}

//  RESET TIMERS
/*
else if(state!="walking"||state!="pathfinding") {
timer=0;
timer_inside=0;
}*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WALKING PATHFINDING DEPRECATED
/*
if(state="pathfinding"){
path= path_add();
image_speed=image_fps;
sprite_index=walk_anim;
// WALKING speed
timer++;
spd=spd_reg;
if(timer&gt;timer_max){
spd=spd_ins;
timer_inside++;
if(timer_inside&gt;timer_inside_max){
timer=0;timer_inside=0;
}}
*/
/* rotate to player */
/*
var player_point = point_direction(x,y,player.x,player.y);
player_point=direction;
var diff = angle_difference(image_angle,player_point);
if(image_angle!=sign(player_point)){
if((diff&lt;10)&amp;&amp;(diff&gt;-10)){
image_angle=player_point;
}
else{
    if((diff)&gt;0){
    image_angle-=get_generic_turnspeed();
    }
    else{
    image_angle+=get_generic_turnspeed();
    }}
}
//image_angle=direction;

///path reference
var send=false;


var mx = (player.x div grid)*grid+grid/2; // /2
var my = (player.y div grid)*grid+grid/2;

    mp_grid_add_instances(gridlocal, wall, 0);
    mp_grid_add_instances(gridlocal, des_woodenbox, 0);
    mp_grid_add_instances(gridlocal, des_wall_br, 0);
    //mp_grid_add_instances(gridlocal, en_boxer, 1);

    
    
if (mp_grid_path(gridlocal, path, x, y, mx, my, 1)) {
 path_start(path, spd, path_action_stop, false);
}
else {
    last_state="pathfinding";
    state="trans_from_path";
    sprite_index=trans_anim;
    image_index=floor(sprite_get_number(trans_anim)-1);
    
    path_end();
    path_delete(path);
    
    }  //change to something else
}
*/
//if !(state=="pathfinding"){
/*path_end();
path_delete(path);*/
//}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WALKING PATHFINDING_ALT

if(state="pathfinding"){
//path= path_add();
image_speed=image_fps;
sprite_index=walk_anim;
// WALKING speed
timer++;
spd=spd_reg;
if(timer&gt;timer_max){
spd=spd_ins;
timer_inside++;
if(timer_inside&gt;timer_inside_max){
timer=0;timer_inside=0;
}}

/* rotate to player */

var player_point = point_direction(x,y,player.x,player.y);
player_point=direction;
var diff = angle_difference(image_angle,player_point);
if(image_angle!=sign(player_point)){
if((diff&lt;10)&amp;&amp;(diff&gt;-10)){
image_angle=player_point;
}
else{
    if((diff)&gt;0){
    image_angle-=get_generic_turnspeed();
    }
    else{
    image_angle+=get_generic_turnspeed();
    }}
}
//image_angle=direction;

///path reference
    
    
//if (mp_potential_step_object(player.x,player.y,spd,wall)) {
 ///Neki
// mp_potential_path_object(def_path, player.x, player.y, spd, 4, wall)


//re enable if needed NVM


    if(mp_grid_path(grid_def, def_path, x, y, player.x, player.y, true)){
    path_end();
    path_start(def_path, spd, path_action_continue, true); }
   // else{
    /*
        last_state="pathfinding";
        state="trans_from_path";
        sprite_index=trans_anim;
        image_index=floor(sprite_get_number(trans_anim)-1);*/
    //    }
    
    
    
    
    
//}
/*else {
    last_state="pathfinding";
    state="trans_from_path";
    sprite_index=trans_anim;
    image_index=floor(sprite_get_number(trans_anim)-1);
    
    
    }  //change to something else*/
    
    
} //end this code action



/*
if !(state=="pathfinding"){
path_end();
path_delete(path);
}*/





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TRANSFORMING from IDLE

if(state=="trans_from_idle"){
sprite_index=trans_anim;
image_speed=image_fps;
if(image_index==sprite_get_number(trans_anim)-1){
image_index=0;
state="pathfinding";
last_state="idle";
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TRANSFORMING FROM PATH

if(state="trans_from_path"){

var spr=trans_anim;
sprite_index=spr;
//image_index=0;
image_speed=-(image_fps);
speed=0;
/*for(var i=sprite_get_number(spr);i&lt;=0;i--){
image_index=i;
}*/
//nof_pushback(x,y,0,string(image_index),60);
if(image_index&lt;1){
state="idle_alert";
last_state="pathfinding";
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IDLE
if(state="idle"){
sprite_index=idle_anim;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IDLE ALERT
if(state="idle_alert"){
sprite_index=idle_anim;
if(instance_exists(player)){
    if(distance_to_object(player)&lt;alert_range){
    vis_timer++;
    if(vis_timer&gt;vis_timer_max){
    vis_timer=0;
    var vis = instance_create(x,y,vis_16px);
    with(vis){
    parent=other.id;
    speed=get_visspeed();
    direction=point_direction(x,y,player.x,player.y);
    }
    }
    }

    if(alerted_from_idle){
    alerted_from_idle=false;
    state="trans_from_idle";
    last_state="idle_alert";
    image_index=0;
}   }}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DAMAGED
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACKING
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PATROLING using walk
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OVERCHARGE DECAY

if(hp&gt;hp_max){
if(hp&gt;hp_over_max){hp=hp_over_max;}

hp-=hp_over_decay;
hp_uber=true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST AREA
if(debug==true){
nof_pushback(x,y-20,1, round(hp),  1);
nof_pushback(x,y-40,1, state, 1);
nof_pushback(x,y-60,1, last_state, 1);
nof_pushback(x,y-80,1, string(image_index), 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NADE KNOCKBACK
if(state=="knockback"){
kno_dir=nade_dir+180;
if(last_state=="pathfinding"){path_end();}
//image
sprite_index=knockback_anim;
image_angle=nade_dir;
image_index=0;
image_speed=0;

//moving
direction=kno_dir;
speed=kno_speed;
kno_speed-=kno_speed_dec;

//moving stop
if(kno_speed&lt;=0){
    kno_speed=0;
    speed=0;
    state=last_state;
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///test
if(debug==true){
nof_pushback(x,y,0,string(image_index),1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VISIBILITY PLAYER

//send out nodes
    //nodes collide with player and report back
        //setup vars to set state to pathfinding
            //if clear line of sight use regular walk instead of pathfinding
                //exchange between it, if close to wall switch to pathfinding
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CRIT

if(state=="crit"){
if(crit_timer==0){
timer=0;timer_inside=0;
crit_timer++;
image_index=irandom_range(0,sprite_get_number(crit_anim));
sprite_index=crit_anim;
//direction=point_direction(player.x,player.y,x,y);
//speed=20;
}
else{       //loop
crit_timer++;
}

if(crit_timer&gt;=crit_timer_max){
state=last_state;
last_state=state;
crit_timer=0;
}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if ded

///NORMAL

if(hp&lt;0)&amp;&amp;(death_reason=="normal"){
//var dir=point_direction(player.x,player.y,x,y);
var debris_max = irandom_range(2,5);

for(var i=0;i&lt;debris_max;++i){
    
    var nigg =instance_create(x,y,universal_debris);
    with(nigg){
    spd=irandom_range(8,16);
    spd_decay=0.50;
    sprite=spr_boxer_parts;
    direction=other.dir+irandom_range(-25,25);
    set_image_scale(1);
    }
}
instance_destroy();
}

 /// NADE
 
if(hp&lt;0)&amp;&amp;(death_reason=="nade"){

dir=point_direction(nade_x,nade_y,x,y);

//var dir=point_direction(player.x,player.y,x,y);
var debris_max = irandom_range(3,8);

for(var i=0;i&lt;debris_max;++i){
    
    var nigg =instance_create(x,y,universal_debris);
    with(nigg){
    spd=irandom_range(10,19);
    spd_decay=0.50;
    sprite=spr_boxer_parts;
    direction=other.dir+irandom_range(-45,45);
    set_image_scale(1);
    }
}
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///NADE DMG

if(instance_exists(wp_nadedmg)){
    hp-=get_nadedmg_distance(distance_to_object(wp_nadedmg));
    if(hp&lt;0){death_reason="nade";nade_x=wp_nadedmg.x;nade_y=wp_nadedmg.y;}
    

//knockback vars
if(get_nadedmg_distance(distance_to_object(wp_nadedmg)))&gt;(get_nadedmg/100*10){
    last_state=state;state="knockback";
    nade_dir=point_direction(x,y,wp_nadedmg.x,wp_nadedmg.y);
    kno_int = get_nadedmg_distance(distance_to_object(wp_nadedmg))/100;
    kno_speed=kno_int*10;
    kno_speed_dec=kno_speed/30;
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MISC last place

dir=point_direction(player.x,player.y,x,y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///LAST ACTION(empty)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///temp kys
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="wp_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dmg
if(instance_exists(wp_projectile)){
bull=instance_nearest(x,y,wp_projectile);
if(bull.kys_start!=true){
if(bull.iscritical==true){
last_state=state;
state="crit";
}
hp-=bull.dmg;
bull.kys_start=true;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
